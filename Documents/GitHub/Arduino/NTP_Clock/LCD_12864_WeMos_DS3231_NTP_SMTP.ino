/*
 * libraries 目錄：
 *              <U8g2lib.h>     = U8g2
 *              <DS3231.h>      = DS3231
 *              "DHT.h"         = DHT_sensor_library
 *              開發版管理員 : esp8266 ver 2.7.4
 *                            <TZ.h>  
 *                            <ESP8266WiFi.h>
 *                            <coredecls.h>
 *                            <Schedule.h>
 *                            <PolledTimeout.h>
 *                            <time.h>
 *                            <sntp.h>
 *                            
 *              <EMailSender.h> = EMailSender-master
 */

#include <Arduino.h>
#include <SPI.h>
#include <U8g2lib.h>

#include <DS3231.h>
#include <Wire.h>
DS3231 Clock;
bool Century=false;
bool h12;
bool PM;

#include "DHT.h"
#define DHTPIN D8     // Digital pin connected to the DHT sensor
// Uncomment whatever type you're using!
//#define DHTTYPE DHT11   // DHT 11
#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)
DHT dht(DHTPIN, DHTTYPE);

// WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ========//
#ifndef STASSID
#define STASSID "SUN-CHT"
#define STAPSK  "0226907200"
#endif

// initial time (possibly given by an external RTC)
#define RTC_UTC_TEST 1510592825 // 1510592825 = Monday 13 November 2017 17:07:05 UTC


// This database is autogenerated from IANA timezone database
//    https://www.iana.org/time-zones
// and can be updated on demand in this repository
#include <TZ.h>

#define MYTZ TZ_Asia_Taipei

////////////////////////////////////////////////////////

#include <ESP8266WiFi.h>
#include <coredecls.h>                  // settimeofday_cb()
#include <Schedule.h>
#include <PolledTimeout.h>

#include <time.h>                       // time() ctime()
#include <sys/time.h>                   // struct timeval

#include <sntp.h>                       // sntp_servermode_dhcp()

// for testing purpose:
extern "C" int clock_gettime(clockid_t unused, struct timespec *tp);

////////////////////////////////////////////////////////

static timeval tv;
static timespec tp;
static time_t now;
static uint32_t now_ms, now_us;

//static esp8266::polledTimeout::periodicMs showTimeNow(60000);
static esp8266::polledTimeout::periodicMs showTimeNow(5000);
static int time_machine_days = 0; // 0 = now
static bool time_machine_running = false;
int wifi_check=0xf0;

boolean Clock_Correct=false; 

// OPTIONAL: change SNTP startup delay
// a weak function is already defined and returns 0 (RFC violation)
// it can be redefined:
//uint32_t sntp_startup_delay_MS_rfc_not_less_than_60000 ()
//{
//    //info_sntp_startup_delay_MS_rfc_not_less_than_60000_has_been_called = true;
//    return 60000; // 60s (or lwIP's original default: (random() % 5000))
//}

// OPTIONAL: change SNTP update delay
// a weak function is already defined and returns 1 hour
// it can be redefined:
//uint32_t sntp_update_delay_MS_rfc_not_less_than_15000 ()
//{
//    //info_sntp_update_delay_MS_rfc_not_less_than_15000_has_been_called = true;
//    return 15000; // 15s
//}
// WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ======== WiFi NTP ========//

// Gmail SMTP sender ======= Gmail SMTP sender ======= Gmail SMTP sender ======= Gmail SMTP sender ======= //
#include <EMailSender.h>
EMailSender emailSend("sun6965clock@gmail.com", "02bhApt0");
// Gmail SMTP sender ======= Gmail SMTP sender ======= Gmail SMTP sender ======= Gmail SMTP sender ======= //

String t_sec="";
String t_mnt="";
String t_hr="";
String t_date="";
String t_mon="";
String t_yr="";
String t_day="";
int i_DoW;
String NTP_str="";

String hum="";
String Temp="";
/* WeMos D1 R1  E=D2 R/W=D5 RS=D6 RST=D7 , DHTPIN 請改為D8*/
U8G2_ST7920_128X64_1_SW_SPI u8g2(U8G2_R0, D2, D5, D6,D7);  
#define BLA_Pin D9  //LCD 背光調整
/* ************************************* */

/* WeMos D1 R2  E=D0 R/W=D3 RS=D4 RST=D5 , DHTPIN 請改為 D7*/
//U8G2_ST7920_128X64_1_SW_SPI u8g2(U8G2_R0, D0, D3, D4,D5); 
//#define DHTPIN D6 //LCD 背光調整
/* ************************************* */
 
/* u8g2.begin() is required and will sent the setup/init sequence to the display */
void setup(void) {
  Wire.begin();
  dht.begin();
  Serial.begin(19200);

  pinMode(BLA_Pin, OUTPUT);
  hum="00.0";
  Temp="00.0";
  //Set_Time();
  //analogWrite(D9,255); 
  
  u8g2.begin();

    // setup RTC time
  // it will be used until NTP server will send us real current time
  time_t rtc = RTC_UTC_TEST;
  timeval tv = { rtc, 0 };
  settimeofday(&tv, nullptr);

  // install callback - called when settimeofday is called (by SNTP or us)
  // once enabled (by DHCP), SNTP is updated every hour
  settimeofday_cb(time_is_set_scheduled);

  // NTP servers may be overriden by your DHCP server for a more local one
  // (see below)

  // ----> Here is the ONLY ONE LINE needed in your sketch

  //configTime(MYTZ, "pool.ntp.org");
  configTime(MYTZ, "time.google.com");

  //       Here is the ONLY ONE LINE needed in your sketch <----
  // pick a value from TZ.h (search for this file in your filesystem) for MYTZ

  // former configTime is still valid, here is the call for 7 hours to the west
  // with an enabled 30mn DST
  //configTime(7 * 3600, 3600 / 2, "pool.ntp.org");

  // OPTIONAL: disable obtaining SNTP servers from DHCP
  //sntp_servermode_dhcp(0); // 0: disable obtaining SNTP servers from DHCP (enabled by default)

  // start network
/*  WiFi.persistent(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK); */
  Link_Wifi();
  // don't wait for network, observe time changing
  // when NTP timestamp is received
  //Serial.printf("Time is currently set by a constant:\n");
  //showTime();
}

/* draw something on the display with the `firstPage()`/`nextPage()` loop*/
void loop(void) {
  ReadDS3231();
  if (t_sec.toInt()== 0) ReadDHT22();
  //if (t_sec.toInt()== 30) ReadNTP_set_DS3231();
  if ((t_hr.toInt()== 4) and (t_mnt.toInt()== 12) and (t_sec.toInt()== 16)) ReadNTP_set_DS3231(); //每日 04:12:16 am 同步NTP
  //if ((t_hr.toInt()== 4) and (t_mnt.toInt()== 10) and (t_sec.toInt()== 04)) ReadNTP_set_DS3231(); //每日 04:10:04 am 同步NTP
  //if ((t_sec.toInt()== 15) or (t_sec.toInt()== 45))  ReadNTP_set_DS3231(); //15,45 Sec同步NTP
  //if (t_sec.toInt()== 15) ReadNTP_set_DS3231(); //15,45 Sec同步NTP
  if ((t_mnt.toInt() % 5)==0 ) {
        if (WiFi.status() == WL_CONNECTED ) {     
            wifi_check=0xf8;
          }
        else {
            wifi_check=0xf0;
        }
  }
  u8g2.firstPage();
  
  do {
    if (t_sec.toInt()<10 ) {
        u8g2.setFont(u8g2_font_ncenB14_tf);
        u8g2.drawStr(11,14,t_yr.c_str());
        u8g2.drawStr(0,30,t_mon.c_str());
        u8g2.drawStr(24,30,"/");
        u8g2.drawStr(33,30,t_date.c_str());
        }
    else {
        u8g2.setFont(u8g2_font_ncenB14_tf);
        u8g2.drawStr(0,14,Temp.c_str());
        u8g2.drawStr(40,14,"C");
        u8g2.drawStr(0,30,hum.c_str());
        u8g2.drawStr(40,30,"%");

        u8g2.setFont(u8g2_font_ncenB14_tf);
        u8g2.drawStr(65,30,t_mon.c_str());
        u8g2.drawStr(89,30,"/");
        u8g2.drawStr(98,30,t_date.c_str());
    }
    //u8g2.setFont(u8g2_font_courB24_tf );
    u8g2.setFont(u8g2_font_wqy15_t_gb2312b);
    //u8g2.drawStr(65,30,t_day.c_str());
    u8g2.drawUTF8(65,13,t_day.c_str());
    u8g2.setFont(u8g2_font_open_iconic_all_1x_t);
    u8g2.drawGlyph(119, 10, wifi_check);  
    
    
    u8g2.setFont(u8g2_font_fub30_tf);
    u8g2.drawStr(0,64,t_hr.c_str());
    u8g2.drawStr(45,58,":");
    u8g2.drawStr(60,64,t_mnt.c_str());
    u8g2.setFont(u8g2_font_ncenB14_tf);
    u8g2.drawStr(106,64,t_sec.c_str());
    

  } while ( u8g2.nextPage() );

  delay(250);
}

void ReadDS3231()
{
    //int second,minute,hour,date,month,year,temperature;
    t_sec=String(Clock.getSecond());            if (t_sec.length()<2) t_sec="0"+t_sec;
    t_mnt=String(Clock.getMinute());            if (t_mnt.length()<2) t_mnt="0"+t_mnt;
    t_hr=String(Clock.getHour(h12, PM));        if (t_hr.length()<2) t_hr="0"+t_hr;
    t_date=String(Clock.getDate());             if (t_date.length()<2) t_date="0"+t_date;
    t_mon=String(Clock.getMonth(Century));      if (t_mon.length()<2) t_mon="0"+t_mon; 
    t_yr="20"+String(Clock.getYear());
    i_DoW=Clock.getDoW();

 /*   switch (i_DoW) {
        case 1:
            t_day="Mon";    break;
        case 2:
            t_day="Tue";    break;
        case 3:
            t_day="Wed";    break;
        case 4:
            t_day="Thu";    break;
        case 5:
            t_day="Fri";    break;
        case 6:
            t_day="Sat";    break;
        default:
            t_day="Sun";    break;
    } */
    switch (i_DoW) {
        case 1:
            t_day="星期一";    break;
        case 2:
            t_day="星期二";    break;
        case 3:
            t_day="星期三";    break;
        case 4:
            t_day="星期四";    break;
        case 5:
            t_day="星期五";    break;
        case 6:
            t_day="星期六";    break;
        default:
            t_day="星期日";    break;
    } 
    
    if ((t_hr.toInt()>=6) and (t_hr.toInt()<=21)) {
    //if (t_sec.toInt() <= 30) {
        digitalWrite(BLA_Pin, HIGH); 
        }
    else {
        analogWrite(BLA_Pin,255);
    }
 
}
void ReadDHT22()
{
  float h = dht.readHumidity();
      int h1=h*10;
      int h2=h1/10;
      int h3=h1%10;
      hum=String(h2) +"." +String(h3) ;//+"%";
      //Serial.println(hum);
  float t = dht.readTemperature();
      int t1=t*10;
      int t2=t1/10;
      int t3=t1%10;
      Temp=String(t2) +"." +String(t3);///+"°C";
      //Serial.println(Temp);
    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t)) {
        Serial.println(F("Failed to read from DHT sensor!"));
        Temp="99.9";
        hum="99.9";
        return;
      }
}


void ReadNTP_set_DS3231() {
  gettimeofday(&tv, nullptr);
  clock_gettime(0, &tp);
  now = time(nullptr);
  now_ms = millis();
  now_us = micros();

  // human readable
  if (Clock_Correct==true) {
        NTP_str=String(ctime(&now));
        //Serial.print(NTP_str);
        String NTP_DoW=NTP_str.substring(0,3); 
        String NTP_mon=NTP_str.substring(4,7); 
        String NTP_day=NTP_str.substring(8,10); 
        String NTP_hr=NTP_str.substring(11,13); 
        String NTP_munt=NTP_str.substring(14,16); 
        String NTP_sec=NTP_str.substring(17,19); 
        String NTP_yr=NTP_str.substring(22,24);
        int NTP_month=0;
        i_DoW=0;
        
        if (NTP_mon=="Jun") { NTP_month=1;}
            else if (NTP_mon=="Feb") { NTP_month=2;}
            else if (NTP_mon=="Mar") { NTP_month=3;}
            else if (NTP_mon=="Apr") { NTP_month=4;}
            else if (NTP_mon=="May") { NTP_month=5;}
            else if (NTP_mon=="Jun") { NTP_month=6;}
            else if (NTP_mon=="Jul") { NTP_month=7;}
            else if (NTP_mon=="Aug") { NTP_month=8;}
            else if (NTP_mon=="Sep") { NTP_month=9;}
            else if (NTP_mon=="Oct") { NTP_month=10;}
            else if (NTP_mon=="Nov") { NTP_month=11;}
            else {NTP_month=12;}

        if (NTP_DoW=="Mon") { i_DoW=1;}
            else if (NTP_DoW=="Tue") { i_DoW=2;}
            else if (NTP_DoW=="Wed") { i_DoW=3;}
            else if (NTP_DoW=="Thu") { i_DoW=4;}
            else if (NTP_DoW=="Fri") { i_DoW=5;}
            else if (NTP_DoW=="Sat") { i_DoW=6;}
            else {i_DoW=7;}
        /*
        Serial.println(NTP_yr);
        Serial.print(NTP_mon);
        Serial.print(" ===> ");
        Serial.println(NTP_month);
        Serial.println(NTP_day);
        Serial.print(NTP_DoW);
        Serial.print(" ===> ");
        Serial.println(i_DoW);
        Serial.println(NTP_hr);
        Serial.println(NTP_munt);
        Serial.println(NTP_sec);
        */
        int YY=NTP_yr.toInt();
        int MM=NTP_month;
        int DD=NTP_day.toInt();
        int WD=i_DoW;
        int hr=NTP_hr.toInt();
        int minut=NTP_munt.toInt();
        int sec=NTP_sec.toInt();
        Clock.setSecond(sec);//Set the second
        Clock.setMinute(minut);//Set the minute
        Clock.setHour(hr); //Set the hour
        Clock.setDoW(WD); //Set the day of the week
        Clock.setDate(DD); //Set the date of the month
        Clock.setMonth(MM); //Set the month of the year
        Clock.setYear(YY); //Set the year (Last two digits of the year)

        Send_Gamil();

        
  }
}

void time_is_set_scheduled() {
  // everything is allowed in this function

  if (time_machine_days == 0) {
    time_machine_running = !time_machine_running;
  }

  // time machine demo
  if (time_machine_running) {
   /* if (time_machine_days == 0){
      Serial.printf("---- settimeofday() has been called - possibly from SNTP\n"
                    "     (starting time machine demo to show libc's automatic DST handling)\n\n");
    
    } */
    now = time(nullptr);
    const tm* tm = localtime(&now);
    gettimeofday(&tv, nullptr);
    constexpr int days = 30;
    time_machine_days += days;
    if (time_machine_days > 360) {
      tv.tv_sec -= (time_machine_days - days) * 60 * 60 * 24;
      time_machine_days = 0;
    } else {
      tv.tv_sec += days * 60 * 60 * 24;
    }
    settimeofday(&tv, nullptr);
  } else {
    //if (Clock_Correct=true) showTime();
  }
  Clock_Correct=true; 
}

void Link_Wifi() {
  int var=0;
  // start network
  WiFi.persistent(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK);
  for (int x = 0; x < 50; x++) {
      //Serial.print("X= ");
      //Serial.println(x);
      delay(250);

      if (WiFi.status() == WL_CONNECTED ) {     
          wifi_check=0xf8;
          break;
      }
      else {
          wifi_check=0xf0;
      }
  }
  //Serial.print("WiFi.status()= ");
  //Serial.println(WiFi.status());
  //Serial.print("wifi_check= ");
  //Serial.println(wifi_check ,HEX);
  /*
  while (WiFi.status() != WL_CONNECTED ) {
    delay(100);
    var++;
    Serial.print("var= ");
    Serial.println(var);
    Serial.print("WiFi.status= ");
    Serial.println(WiFi.status());
    Serial.print("WL_CONNECTED= ");
    Serial.println(WiFi.status());
  }
   if (WiFi.status() == WL_CONNECTED) {
        wifi_check=0xf8;
      }
    else {
        wifi_check=0xf0;
    } */
}

void Send_Gamil() {
        EMailSender::EMailMessage message;
        //String Text_Mssage="Livingroom Clock : " + NTP_str;
        String Text_Mssage="Bedroom Clock : " + NTP_str;
        message.subject = Text_Mssage ;
        message.message = "";
        //message.message = "Ciao come stai<br>io bene.<br>www.mischianti.org";

        EMailSender::Response resp = emailSend.send("sun6965@gmail.com", message);

       // Serial.println("Sending status: ");

       // Serial.println(resp.status);
       // Serial.println(resp.code);
       // Serial.println(resp.desc);
}

void Set_Time() {
int YY=20;
int MM=9;
int DD=4;
int WD=7;
int hr=18;
int minut=35;
int sec=31;
Clock.setSecond(sec);//Set the second
Clock.setMinute(minut);//Set the minute
Clock.setHour(hr); //Set the hour
Clock.setDoW(WD); //Set the day of the week
Clock.setDate(DD); //Set the date of the month
Clock.setMonth(MM); //Set the month of the year
Clock.setYear(YY); //Set the year (Last two digits of the year)
}
